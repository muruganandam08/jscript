pipeline {
    agent any

    environment {
        CREDENTIAL_ID = env.JOB_NAME // Setting CREDENTIAL_ID to the current job name
    }

    stages {
        stage('Check and Generate Password') {
            steps {
                script {
                    // Generate a random password
                    def chars = ('A'..'Z') + ('a'..'z') + ('0'..'9') + '!@#$%^&*()'
                    def password = (1..12).collect { chars[new Random().nextInt(chars.size())] }.join()
                    env.NEW_PASSWORD = password
                    echo "Generated a new password for the credential update process."
                }
            }
        }

        stage('Update Matching Jenkins Credential') {
            steps {
                script {
                    // Retrieve all credentials and filter for the one matching the job name
                    def credentials = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
                        com.cloudbees.plugins.credentials.common.StandardUsernamePasswordCredentials.class,
                        Jenkins.instance,
                        null,
                        null
                    ).find { it.id == CREDENTIAL_ID }

                    // Proceed only if a matching credential is found
                    if (credentials) {
                        echo "Matching credential with ID '${CREDENTIAL_ID}' found. Updating password."

                        def username = credentials.username

                        // Create new credentials with updated password
                        def updatedCredentials = new com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl(
                            credentials.scope,
                            CREDENTIAL_ID,
                            credentials.description,
                            username,
                            env.NEW_PASSWORD
                        )

                        // Update the credential in Jenkins
                        def store = Jenkins.instance.getExtensionList(
                            'com.cloudbees.plugins.credentials.SystemCredentialsProvider'
                        )[0].getStore()
                        store.updateCredentials(
                            com.cloudbees.plugins.credentials.domains.Domain.global(),
                            credentials,
                            updatedCredentials
                        )

                        echo "Credential '${CREDENTIAL_ID}' updated successfully."
                    } else {
                        error "No credential with ID '${CREDENTIAL_ID}' found. Skipping update."
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Password update completed successfully."
        }
        failure {
            echo "Password update failed."
        }
    }
}

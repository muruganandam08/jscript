### Step-by-Step Guide: Running a Sample Node.js Application in Kubernetes to Send Traces to Jaeger

#### Prerequisites:
- Kubernetes cluster with access to the `oteldemo` namespace.
- OpenTelemetry Collector and Jaeger are already set up and running in the cluster.
- `kubectl` command-line tool configured to access your Kubernetes cluster.
- `nodejs` and `npm` installed on your local machine.

### Step 1: Create a Sample Node.js Application
1. **Set up the project structure:**
   ```bash
   mkdir nodejs-otel-app
   cd nodejs-otel-app
   npm init -y
   ```

2. **Install dependencies:**
   Install the necessary OpenTelemetry packages:
   ```bash
   npm install @opentelemetry/api @opentelemetry/sdk-node @opentelemetry/auto-instrumentations-node \
   @opentelemetry/exporter-trace-otlp-http express
   ```

3. **Create a tracing configuration file:**
   Create a file named `tracer.js` in the root of your project:
   ```javascript
   const { NodeSDK } = require('@opentelemetry/sdk-node');
   const { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');
   const { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-http');

   const traceExporter = new OTLPTraceExporter({
     url: 'http://otel-collector.oteldemo.svc.cluster.local:4318/v1/traces', // Update with your OTLP endpoint
   });

   const sdk = new NodeSDK({
     traceExporter,
     instrumentations: [getNodeAutoInstrumentations()],
   });

   sdk.start()
     .then(() => console.log('Tracing initialized'))
     .catch(err => console.error('Error initializing tracing', err));

   process.on('SIGTERM', () => {
     sdk.shutdown()
       .then(() => console.log('Tracing terminated'))
       .catch(err => console.error('Error terminating tracing', err))
       .finally(() => process.exit(0));
   });
   ```

4. **Create a simple Express server:**
   Create a file named `index.js`:
   ```javascript
   require('./tracer'); // Import the tracer configuration

   const express = require('express');
   const app = express();

   app.get('/', (req, res) => {
     res.send('Hello, OpenTelemetry!');
   });

   const port = 3000;
   app.listen(port, () => {
     console.log(`Server is running on http://localhost:${port}`);
   });
   ```

### Step 2: Package the Application
1. **Create a tarball of the application:**
   ```bash
   cd ..
   tar -cvf nodejs-otel-app.tar.gz nodejs-otel-app/
   ```

### Step 3: Deploy the Application to Kubernetes
1. **Upload the tarball to a Kubernetes pod:**
   You can use an Ubuntu pod as a temporary environment to upload the tarball:
   ```bash
   kubectl run ubuntu --image=ubuntu --namespace=oteldemo -- sleep 3600
   kubectl cp nodejs-otel-app.tar.gz oteldemo/ubuntu:/nodejs-otel-app.tar.gz
   ```

2. **Access the Ubuntu pod:**
   ```bash
   kubectl exec -it ubuntu --namespace=oteldemo -- bash
   ```

3. **Install Node.js inside the pod:**
   ```bash
   apt update
   apt install -y nodejs npm
   ```

4. **Extract the tarball and install dependencies:**
   ```bash
   tar -xvf nodejs-otel-app.tar.gz
   cd nodejs-otel-app
   npm install
   ```

5. **Run the application inside the pod:**
   ```bash
   node index.js
   ```

### Step 4: Generate Traces and View in Jaeger
1. **Access the application:**
   Open another terminal and forward the port to your local machine:
   ```bash
   kubectl port-forward pod/ubuntu 3000:3000 --namespace=oteldemo
   ```

   Now you can access the app at `http://localhost:3000`.

2. **Generate traces:**
   Every time you visit `http://localhost:3000`, a trace will be generated and sent to the OpenTelemetry Collector.

3. **View traces in Jaeger:**
   Open the Jaeger UI and search for traces. You should see the traces from the Node.js application.

### Step 5: Clean Up
1. **Delete the Ubuntu pod:**
   ```bash
   kubectl delete pod ubuntu --namespace=oteldemo
   ```

This setup allows you to create a Node.js application, deploy it to a Kubernetes pod, and send traces to Jaeger via the OpenTelemetry Collector.
